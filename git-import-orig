#!/usr/bin/python
# vim: set fileencoding=utf-8 :
#
# (C) 2006,2007 Guido Guenther <agx@sigxcpu.org>
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
"""Import a new upstream version"""

import sys
import os
import tempfile
import re
import glob
import gbp.command_wrappers as gbpc
from gbp.git_utils import (GitRepositoryError, GitRepository, build_tag)
from gbp.config import GbpOptionParser
from gbp.errors import GbpError

def cleanup_tmp_tree(tree):
    """remove a tree of temporary files"""
    try:
        gbpc.RemoveTree(tree)()
    except gbpc.CommandExecFailed:
        print >>sys.stderr, "Removal of tmptree %s failed." % tree


def unpack_orig(archive):
    """unpack a .orig.tar.gz"""
    try:
        unpackArchive = gbpc.UnpackTarArchive(archive, tempfile.mkdtemp(dir='../'))
        unpackArchive()
    except gbpc.CommandExecFailed:
        print "Unpacking of %s failed" % (archive,)
        cleanup_tmp_tree(unpackArchive.dir)
        return
    return unpackArchive.dir


def get_version(tgz):
    """get the version from the filename of a .orig.tar.gz"""
    origre = re.compile('^[a-z\d-]+_(?P<version>[a-z\d\.\~\-]+)\.orig\.tar\.gz')
    m = origre.match(os.path.basename(tgz))
    if m:
        return m.group('version')    

def main(argv):
    ret = 0
    tmpdir = ''

    parser = GbpOptionParser(command=os.path.basename(argv[0]), prefix='',
                           usage='%prog [-u version] /path/to/upstream-version.tar.gz')

    parser.add_option("-u", "--upstreamversion", dest="version",
                      help="Upstream Version")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False,
                      help="verbose command execution")
    parser.add_option("--no-merge", dest='merge', action="store_false", default=True,
                      help="after import dont do any merging to another branch")
    parser.add_config_file_option(option_name="debian-branch", dest='debian',
                      help="branch the debian patch is being developed on, default is '%(debian-branch)s'")
    parser.add_config_file_option(option_name="upstream-branch", dest="upstream",
                      help="upstream branch, default is '%(upstream-branch)s'")
    parser.add_config_file_option(option_name="sign-tags", dest="sign_tags",
                      help="sign git tags", action="store_true")
    parser.add_config_file_option(option_name="keyid", dest="keyid",
                      help="GPG keyid to sign tags with")
    parser.add_config_file_option(option_name="upstream-tag", dest="upstream_tag",
                      help="Format string for upstream tags, default is '%(upstream-tag)s'")
    (options, args) = parser.parse_args(argv[1:])

    gitCheckoutUpstream = gbpc.GitCheckoutBranch(options.upstream)
    gitCheckoutMaster = gbpc.GitCheckoutBranch(options.debian)
    gitShowBranch = gbpc.GitShowBranch()
    gitPullUpstream = gbpc.GitPull('.', options.upstream)

    try:
        if options.verbose:
            gbpc.Command.verbose = True

        if len(args) != 1:
            parser.print_help()
            raise GbpError
        else:
            archive = args[0]

        try:
            repo = GitRepository('.')
        except GitRepositoryError:
            raise GbpError, "%s is not a git repository" % (os.path.abspath('.'))

        if not repo.has_branch(options.upstream):
            print >>sys.stderr, """
Repository does not have branch '%s' for upstream sources. If there is none see
/usr/share/doc/git-buildpackage/manual-html/gbpc.import.convert.html on howto
create it otherwise use --upstream-branch to specify it.
"""  % options.upstream
            raise GbpError

        if options.version:
            version = options.version
        else:
            version = get_version(archive)

        if version:
            print "Upstream version is %s" % (version,)
        else:
            print >>sys.stderr,"Cannot determine upstream version from %s - use -u" % archive
            parser.print_help()
            raise GbpError

        (ret, out) = repo.is_clean()
        if not ret:
            print >>sys.stderr, "Repository has uncommitted changes, commit them first: "
            raise GbpError, out

        tmpdir = unpack_orig(archive)
        if not tmpdir:
            raise GbpError
        else:
            if options.verbose:
                print "Unpacked orig to %s" % tmpdir
            origdir = glob.glob(tmpdir+'/*')[0]
      
        try:
            print "Importing %s to upstream branch..." % archive
            gitCheckoutUpstream()
            gitShowBranch()
            gbpc.GitLoadDirs(verbose=options.verbose)(dir=origdir,
                             summary="Imported upstream version %s" % version)
            gbpc.GitTag(options.sign_tags, options.keyid)(build_tag(options.upstream_tag, version),
                        msg="Upstream version %s" % version)
       
            if options.merge:
                print "Merging to %s" % (options.debian,)
                gitCheckoutMaster()
                gitShowBranch()
                try:
                    gitPullUpstream()
                except gbpc.CommandExecFailed:
                    raise GbpError, """Merge failed, please resolve and run "dch -v %s-1".""" % version
                gbpc.Dch("%s-1" % (version,), 'New Upstream Version')()
        except gbpc.CommandExecFailed:
            raise GbpError, "Import of %s failed" % archive
    except GbpError, err:
        if len(err.__str__()):
            print >>sys.stderr, err
        ret = 1

    if tmpdir:
        cleanup_tmp_tree(tmpdir)

    if not ret:
        print "Succesfully merged version %s of %s into ." % (version, archive)
    return ret

if __name__ == "__main__":
    sys.exit(main(sys.argv))

# vim:et:ts=4:sw=4:

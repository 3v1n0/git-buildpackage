#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# (C) 2006 Guido Guenther <agx@sigxcpu.org>
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Import a new upstream version

import sys
import os
import tempfile
import re
import glob
from optparse import OptionParser
from git_buildpackage import *
from git_buildpackage.git_utils import *


def cleanupTmpTree(tree):
    RemoveTree(tree)()


def unpackOrig(tgz):
    try:
        unpackTGZ=UnpackTGZ(tgz, tempfile.mkdtemp(dir='../'))
        unpackTGZ()
    except CommandExecFailed:
        print "Unpacking of %s failed" % (tgz,)
        cleanupTmpTree(unpackTGZ.dir)
        return
    return unpackTGZ.dir


def get_version(tgz):
    origre=re.compile('^[a-z\d-]+_(?P<version>[a-z\d\.\~\-]+)\.orig\.tar\.gz')
    m=origre.match(os.path.basename(tgz))
    if m:
        return m.group('version')    

def main():
    parser = OptionParser('%prog [-u version] /path/to/upstream-version.tar.gz')

    parser.add_option("-u", "--upstreamversion", dest="version",
                      help="Upstream Version")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False,
                      help="verbose command execution")
    parser.add_option("--upstream-branch", dest="upstream", default='upstream',
                      help="name of the upstream branch, default is 'upstream'")
    parser.add_option("--debian-branch", dest='debian', default='master',
                      help="name of the branch the debian package is being developed on, default is 'master'")
    parser.add_option("--no-merge", dest='merge', action="store_false", default=True,
                      help="after import dont do any merging to another branch")
    (options, args) = parser.parse_args()

    gitCheckoutUpstream=GitCheckoutBranch(options.upstream)
    gitCheckoutMaster=GitCheckoutBranch(options.debian)
    gitShowBranch=GitShowBranch()
    gitPullUpstream=GitPull('.', options.upstream)

    if options.verbose:
        Command.verbose = True

    if len(args) != 1:
        parser.print_help()
        return 1
    else:
        tgz=args[0]

    if not is_repository('.'):
        print >>sys.stderr,"%s is not a git repository" % (os.path.abspath('.'),)
        return 1

    if options.version:
        version = options.version
    else:
        version=get_version(tgz)
    if version:
        print "Upstream version is %s" % (version,)
    else:
        print >>sys.stderr,"Cannot determine upstream version from %s - use -u" % (tgz,)
        parser.print_help()
        return 1

    (ret, out) = is_repository_clean('.')
    if not ret:
        print >>sys.stderr, "Repository has uncommitted changes, commit them first: "
        print >>sys.stderr, out
        return 1

    tmpdir=unpackOrig(tgz)
    if not tmpdir:
        return 1
    else: 
        print "Unpacked orig to %s" % (tmpdir, )
        origdir=glob.glob(tmpdir+'/*')[0]
  
    try:
        print "Importing %s to upstream branch..." % (tgz,)
        gitCheckoutUpstream()
        gitShowBranch()
        GitLoadDirs()(origdir)
        GitTag()(sanitize_version(version))
   
        if options.merge:
            print "Merging to master..."
            gitCheckoutMaster()
            gitShowBranch()
            gitPullUpstream()
            Dch("%s-1" % (version,), 'New Upstream Version')()
    except CommandExecFailed:
        print >>sys.stderr, "Import of %s failed" % (tgz,)
        cleanupTmpTree(tmpdir)
        return 1
    cleanupTmpTree(tmpdir)

    print "Merged version %s of %s into ." % (version, tgz)
    return 0

if __name__ == "__main__":
    sys.exit(main())

# vim:et:ts=4:sw=4:

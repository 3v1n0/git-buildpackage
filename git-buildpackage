#!/usr/bin/python
#
# run debuild in a git repository
#
# (C) 2006 Guido Guenther <agx@sigxcpu.org>
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import sys,os,commands,re
import optparse

build_cmd='debuild'
    
def get_version():
    versionre=re.compile('^Version:\s+(?P<version>[\d\w~\-\.]+)$')
    (status, out) = commands.getstatusoutput('dpkg-parsechangelog')
    for line in out.split('\n'):
        m=versionre.match(line)
        if m:
            return m.group('version')

def exec_command(cmd):
    print "Running:", cmd
    ret=os.system(cmd)
    if ret:
        print >>sys.stderr,"%s failed" % cmd
        return False, ret
    else:
        return True, 0

def main(argv):
    args = [ arg for arg in argv[1:] if arg.find('--git-') == 0 ]
    dpkg_args = [ arg for arg in argv[1:] if arg.find('--git-') == -1 ]

    parser=optparse.OptionParser()
    parser.add_option("--git-ignore-new", action="store_true", dest="ignore_new", default=False,
                      help="build with incommited changes in the source tree")
    parser.add_option("--git-tag", action="store_true", dest="tag", default=False,
                      help="build with uncommited changes in the source tree")
    parser.add_option("--git-builder", dest="build_cmd", default=build_cmd,
                      help="command to build the package e.g. default is 'debuild'")
    (options, args) = parser.parse_args(args)

    clean_cmd='%s clean' % options.build_cmd
    if not options.ignore_new:
        if not exec_command(clean_cmd)[0]: return 1
        (status, out) = commands.getstatusoutput('git status')
        msgs=out.split('\n')
        if msgs[0] != 'nothing to commit':
            print "You have uncommitted changes in your source tree:"
            print out
            print "Use --git-ignore_new to override"
            return 1
    cmd=options.build_cmd+' -i.git '+" ".join(dpkg_args)
    if not exec_command(cmd)[0]: return 1
    if options.tag:
        version=get_version()
        if version:
            print "Tagging", version
            if not exec_command('git-tag %s' % version)[0]: return 1
        else:
            print >>sys.stderr,"Can't parse version from changes file"

if __name__ == '__main__':
    sys.exit(main(sys.argv))

# vim:et:ts=4:sw=4:
